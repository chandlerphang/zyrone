package com.zyrone.framework.core.security;

import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.security.NoSuchAlgorithmException;

import org.apache.commons.lang3.StringUtils;
import org.owasp.validator.html.AntiSamy;
import org.owasp.validator.html.CleanResults;
import org.owasp.validator.html.Policy;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.WebRequest;

import com.zyrone.framework.core.service.ServiceException;
import com.zyrone.framework.core.web.RequestUtils;
import com.zyrone.framework.core.web.ZyroneRequestContext;

@Service("zrnExploitProtectionService")
public class ExploitProtectionServiceImpl implements ExploitProtectionService {

    private static final String CSRFTOKEN = "csrfToken";
    private static final String CSRFTOKENPARAMETER = "csrfToken";
    private static final Logger LOG = LoggerFactory.getLogger(ExploitProtectionServiceImpl.class);

    private static class Handler extends URLStreamHandler {
        @Override
        protected URLConnection openConnection(URL u) throws IOException {
            URL resourceUrl = getClass().getClassLoader().getResource(u.getPath());
            return resourceUrl.openConnection();
        }
    }

    private static Policy getAntiSamyPolicy(String policyFileLocation) {
        try {
            URL url = new URL(null, policyFileLocation, new Handler());
            return Policy.getInstance(url);
        } catch (Exception e) {
            throw new RuntimeException("无法获取AntiSamy Policy", e);
        }
    }

    private static final String DEFAULT_ANTISAMY_POLICY_FILELOCATION = "classpath:antisamy-myspace.xml";

    protected String antiSamyPolicyFileLocation = DEFAULT_ANTISAMY_POLICY_FILELOCATION;
    // 是线程安全的
    private Policy antiSamyPolicy = getAntiSamyPolicy(antiSamyPolicyFileLocation);
    // 对于scan()是线程安全的
    private final AntiSamy as = new AntiSamy();

    protected boolean xsrfProtectionEnabled = true;
    protected boolean xssProtectionEnabled = true;

    @Override
    public String cleanString(String string) throws ServiceException {
        if (!xssProtectionEnabled || StringUtils.isEmpty(string)) {
            return string;
        }
        
        try {
            CleanResults results = as.scan(string, antiSamyPolicy);
            return results.getCleanHTML();
        } catch (Exception e) {
            LOG.error("无法clean传进来的内容", e);
            throw new ServiceException("无法clean传进来的内容", e);
        }
    }

    @Override
    public String cleanStringWithResults(String string) throws ServiceException {
        if (!xssProtectionEnabled || StringUtils.isEmpty(string)) {
            return string;
        }
        
        try {
            CleanResults results = as.scan(string, antiSamyPolicy);
            if (results.getNumberOfErrors() > 0) {
                throw new CleanStringException(results);
            }
            return results.getCleanHTML();
        } catch (CleanStringException e) {
            throw e;
        } catch (Exception e) {
            StringBuilder sb = new StringBuilder();
            sb.append("无法clean传进来的内容");
            sb.append("\n注意 - 当前正在使用的Policy是");
            sb.append(getAntiSamyPolicyFileLocation());
            sb.append(". 可以提供别的Policy文件来改变这一验证结果.");
            LOG.error(sb.toString(), e);
            throw new ServiceException(sb.toString(), e);
        }
    }

    @Override
    public void compareToken(String passedToken) throws ServiceException {
        if (xsrfProtectionEnabled) {
            if (!getCSRFToken().equals(passedToken)) {
                throw new ServiceException("存储的XSRF token 与 (" + passedToken + ")不一致, 或者Session可能已经过期.");
            } else {
                LOG.debug("CSRF token验证通过");
            }
        }
    }

    @Override
    public String getCSRFToken() throws ServiceException {
        WebRequest request = ZyroneRequestContext.getRequestContext().getWebRequest();
        if (RequestUtils.isOKtoUseSession(request)) {
        	String token = (String) request.getAttribute(CSRFTOKEN, WebRequest.SCOPE_GLOBAL_SESSION);
            if (StringUtils.isEmpty(token)) {
                try {
                    token = RandomGenerator.generateRandomId("SHA1PRNG", 32);
                } catch (NoSuchAlgorithmException e) {
                    LOG.error("无法生成随机token", e);
                    throw new ServiceException("无法生成随机token", e);
                }
                request.setAttribute(CSRFTOKEN, token, WebRequest.SCOPE_GLOBAL_SESSION);
            }
            return token;
        }
        return null;
    }

    @Override
    public String getAntiSamyPolicyFileLocation() {
        return antiSamyPolicyFileLocation;
    }

    @Override
    public void setAntiSamyPolicyFileLocation(String antiSamyPolicyFileLocation) {
        this.antiSamyPolicyFileLocation = antiSamyPolicyFileLocation;
        antiSamyPolicy = getAntiSamyPolicy(antiSamyPolicyFileLocation);
    }

    public boolean isXsrfProtectionEnabled() {
        return xsrfProtectionEnabled;
    }

    public void setXsrfProtectionEnabled(boolean xsrfProtectionEnabled) {
        this.xsrfProtectionEnabled = xsrfProtectionEnabled;
    }

    public boolean isXssProtectionEnabled() {
        return xssProtectionEnabled;
    }

    public void setXssProtectionEnabled(boolean xssProtectionEnabled) {
        this.xssProtectionEnabled = xssProtectionEnabled;
    }
    
    @Override
    public String getCsrfTokenParameter() {
        return CSRFTOKENPARAMETER;
    }
    
}
